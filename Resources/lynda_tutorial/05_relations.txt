
RELATIONSHIP TYPES

Relational database associations

	* one-to-one
	Director <> School, for example

	* one-to-many
	Teacher > Classes

	* many-to-many
	Classes > Students

In TripleC:

* one-to-one
	users > pictures
	users > teachers

* one-to-many
	schools > users

* many-to-many


User has_one :teacher
Teacher belongs_to :user

User has_one :picture
Picture belongs_to :user

// the one with "belongs_to" should have the foreign key

To link 2 records:

## One-to-many

School has_many :users
User belongs_to :school

User has_many :projects
Project belongs_to :user



school.users
Append:
school.users << new_user
school.users.delete(new_user)	// removes from this table
school.users.destroy(new_user)	// deletes from the original table
school.users.clear
school.users.empty?
school.users.size

create new school, save to the database, query user, append to school
school_manila = School.new(:name => "Manila School", :city => "Manila", :country => "Philippines")
school_manila.save
udit = User.find(1)
school_manila.users << udit
school_manila

//query
school_manila.users.where(:login => "udit")

##Many-to-many 

project has_and_belongs_to_many :users

Join Table Naming: first_table + _ + second_table
rails generate migration CreateProjectsUsersJoin

// specify the join table
has_and_belongs_to_many :projects, :join_table => "projects_users"

// create an alias for the users. Makes more sense to call them 'collaborators' in this context:
has_and_belongs_to_many :collaborators, :class_name => "User", :join_table => "projects_users"